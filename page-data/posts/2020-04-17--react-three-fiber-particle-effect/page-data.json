{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/posts/2020-04-17--react-three-fiber-particle-effect/","result":{"data":{"site":{"siteMetadata":{"disqus":"rolandharrison"}},"post":{"html":"<p><a href=\"https://github.com/react-spring/react-three-fiber\">React-Three-Fiber</a> allows us to write re-usable React components for <a href=\"https://threejs.org/\">Three.js</a> without any loss in performance. As a reconciler for React, <em>react-three-fiber</em> renders components to elements within Three.js. Having worked with both React and Three.js before, I was interested to see what could be done when combined. In this article we will build a single-page React application with a vertex shader only effect.</p>\n<p>This article requires a basic understanding of React rendering, React hooks and Three.js.</p>\n<p>We will build a simple looking effect in the vertex shader. Now particle effects can be done more simply with what Three.js provides, but I thought it would be fun to dive a little deeper. We'll start by creating a React project, then build up a single component to render thousands of particles. Because all the movement and animation will be done in the vertex shader, we can easily extend this project to build all sorts of other animations.</p>\n<h3 id=\"setting-up-the-project\" style=\"position:relative;\"><a href=\"#setting-up-the-project\" aria-label=\"setting up the project permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setting up the project</h3>\n<p>We start by creating a React project using the excellent <a href=\"https://create-react-app.dev/docs/getting-started\">create-react-app</a> CLI, start up the application and then check out the site. I would normally suggest using the typescript template, but for this article we are just interested in the effect.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">npx create-react-app particle-effect\n<span class=\"token builtin class-name\">cd</span> particle-effect\n<span class=\"token function\">npm</span> start</code></pre></div>\n<p>You should see the spinning React logo at <em><a href=\"http://localhost:3000\">http://localhost:3000</a></em>.</p>\n<p>We then need to install the <em>react-three-fiber</em> and <em>three.js</em> libraries. Execute this command from the <em>particle-effect</em> folder.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> three react-three-fiber</code></pre></div>\n<h3 id=\"particles\" style=\"position:relative;\"><a href=\"#particles\" aria-label=\"particles permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Particles</h3>\n<p>The first component we'll touch on is for the Particles. The functional component is laid out as below and in the next few steps, we'll look at each part one at a time.</p>\n<p>We import the Three.js library so we can use the types it provides. We will also need two of the hooks from <em>react-three-fiber</em>.</p>\n<ul>\n<li><em>useFrame</em> will execute the callback on every frame. Here we can make incremental updates to a counter or update the position of a mesh.</li>\n<li><em>useLoader</em> will allow us to load a texture or a .gltf asset using the suspense API provided by React. We'll come back to how the suspense API is used towards the end when we put the canvas together with all our components.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> <span class=\"token constant\">THREE</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"three\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useFrame<span class=\"token punctuation\">,</span> useLoader <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-three-fiber\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [1] Create shaders</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Particles</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> clock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token constant\">THREE</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">Clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// [2] Initialize geometry</span>\n\n  <span class=\"token comment\">// [3] Frame updates</span>\n\n  <span class=\"token comment\">// [4] Load a noise texture</span>\n\n  <span class=\"token comment\">// [5] Create the material</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>points</span> <span class=\"token attr-name\">material</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>material<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">geometry</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>geometry<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Particles<span class=\"token punctuation\">;</span></code></pre></div>\n<p>The component props have as input a width and height for the plane that this effect will create. The total number of particles is just width * height. So a 256x256 plane will have 65,536 particles all animating at the same time. A 512x512 plane will have 262,144 particles.</p>\n<p>At the end of the functional component, we return what the reconciler must produce in Three.js. Supplying the geometry and material that we have built in the component above.</p>\n<p>Let's take a look at each part of the component...</p>\n<h4 id=\"1-create-shaders-with-magic-numbers\" style=\"position:relative;\"><a href=\"#1-create-shaders-with-magic-numbers\" aria-label=\"1 create shaders with magic numbers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[1] Create shaders with magic numbers</h4>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> vertexShader <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n      uniform float uTime;\n      uniform float uWidth;\n      uniform float uHeight;\n      uniform sampler2D tNoise;\n\n      attribute float aIndex;\n  \n      varying vec4 vColor;\n\n      void main() {\n        gl_PointSize = 0.4;\n\n        // Find where this vertex fits in the two-dimensional plane\n        vec2 uv = vec2(mod(aIndex, uWidth)/uWidth, mod(aIndex/uWidth, uHeight)/uHeight);\n        \n        // Sample from the noise texture with a slow translation over time\n        vec3 noise = 4.0 * sin(uTime) * texture2D( tNoise, vec2( uv.x + uTime * 0.02, uv.y)).rgb;\n  \n        // Stretch the points along the x-axis and oscillate along the y-axis with a sine wave\n        vec3 position = vec3(uv.x*16.0-8.0, 2.0 * sin(uTime * 2.0 + 4.0 * uv.x), uv.y * 10.0);\n\n        // Apply the noise to the position of this vertex\n        position = position + sin(vec3(noise.rgb));\n\n        // Fade the further vertices\n        vColor = vec4(0.003 , 0.41, 0.49, 0.8*(1.0 -uv.y));\n      \n        // Apply the matrices that Three.js give us from the camera and model position. Transform to our new position.\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n      }\n    </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> fragmentShader <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n      varying vec4 vColor;\n      uniform sampler2D tSprite;\n  \n      void main() {\n        // Apply the color that we got from the vertex shader\n        gl_FragColor = vColor;\n      }\n    </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The uniforms are the same for all vertex shader executions on each vertex whereas the attribute will be the value from the array we will bind when setting up this material. So you can imagine the vertex shader running once for every particle in our effect.</p>\n<p>There may look to be a lot of random numbers in this code, and that is because there are. Tweaking the effect brings out some nice elements in the visual output. In summary, all we are doing is finding where this vertex is in the grid of size uWidth by uHeight. We sample some noise from a bound texture and move things around over time. The fragment shader doesn't do very much at all other than take the varying it receives from the vertex shader.</p>\n<h4 id=\"2-initialize-geometry\" style=\"position:relative;\"><a href=\"#2-initialize-geometry\" aria-label=\"2 initialize geometry permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[2] Initialize geometry</h4>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> geometry <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> geometry <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token constant\">THREE</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">BufferGeometry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> numPoints <span class=\"token operator\">=</span> width <span class=\"token operator\">*</span> height<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> positions <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Float32Array</span><span class=\"token punctuation\">(</span>numPoints <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> indices <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint16Array</span><span class=\"token punctuation\">(</span>numPoints<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> width<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> height<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      positions<span class=\"token punctuation\">[</span><span class=\"token number\">3</span> <span class=\"token operator\">*</span> k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n      positions<span class=\"token punctuation\">[</span><span class=\"token number\">3</span> <span class=\"token operator\">*</span> k <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n      positions<span class=\"token punctuation\">[</span><span class=\"token number\">3</span> <span class=\"token operator\">*</span> k <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      indices<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span>\n      k<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  geometry<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"position\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token constant\">THREE</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">BufferAttribute</span><span class=\"token punctuation\">(</span>positions<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  geometry<span class=\"token punctuation\">.</span><span class=\"token function\">computeBoundingBox</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  geometry<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aIndex\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token constant\">THREE</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">BufferAttribute</span><span class=\"token punctuation\">(</span>indices<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> geometry<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We will need a <em>THREE.BufferGeometry</em> with attribute arrays for positions of the particles and an index for each to find out where it resides in the effect we are going to produce. We won't be using these positions once they surface in the vertex shader.</p>\n<h4 id=\"3-frame-updates\" style=\"position:relative;\"><a href=\"#3-frame-updates\" aria-label=\"3 frame updates permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[3] Frame updates</h4>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token function\">useFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  material<span class=\"token punctuation\">.</span>uniforms<span class=\"token punctuation\">.</span>uTime<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> clock<span class=\"token punctuation\">.</span><span class=\"token function\">getElapsedTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This is a simple one. We need to update the uniform that holds the present time for the shader. This gives us the ability to make changes to the vertex positions over time as we saw in the vertex shader before.</p>\n<h4 id=\"4-load-a-noise-texture\" style=\"position:relative;\"><a href=\"#4-load-a-noise-texture\" aria-label=\"4 load a noise texture permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[4] Load a noise texture</h4>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> noiseTexture <span class=\"token operator\">=</span> <span class=\"token function\">useLoader</span><span class=\"token punctuation\">(</span><span class=\"token constant\">THREE</span><span class=\"token punctuation\">.</span>TextureLoader<span class=\"token punctuation\">,</span> <span class=\"token string\">\"perlin-512.png\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>A texture gives us some magnitude for the displacement of vertices on the plane we are drawing.</p>\n<h4 id=\"5-create-the-material\" style=\"position:relative;\"><a href=\"#5-create-the-material\" aria-label=\"5 create the material permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[5] Create the material</h4>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> material <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>noiseTexture<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>ShaderMaterial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    transparent<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    depthWrite<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    uniforms<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      uTime<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        value<span class=\"token operator\">:</span> <span class=\"token number\">0.0</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      tNoise<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        value<span class=\"token operator\">:</span> noiseTexture\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      uWidth<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        value<span class=\"token operator\">:</span> width\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      uHeight<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        value<span class=\"token operator\">:</span> height\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    blending<span class=\"token operator\">:</span> <span class=\"token constant\">THREE</span><span class=\"token punctuation\">.</span>AdditiveBlending<span class=\"token punctuation\">,</span>\n    vertexShader<span class=\"token operator\">:</span> vertexShader<span class=\"token punctuation\">,</span>\n    fragmentShader<span class=\"token operator\">:</span> fragmentShader\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">,</span> noiseTexture<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The <em>React.memo</em> hook will only execute on a change to the dependencies listed at the end. So if a new noise texture was loaded, it would trigger a new execution of this function, producing a new material. Subsequently, the props on the <em>points</em> component we are returning will trigger a re-render as well. So React will cascade these changes and ensure everything is up to date in what we see.</p>\n<h3 id=\"creating-the-canvas\" style=\"position:relative;\"><a href=\"#creating-the-canvas\" aria-label=\"creating the canvas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating the canvas</h3>\n<p>The core component in <em>react-three-fiber</em> that gives context to nested components is the <em>Canvas</em>.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre style=\"counter-reset: linenumber 0\" class=\"language-tsx line-numbers\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Suspense <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> <span class=\"token constant\">THREE</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"three\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Canvas <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-three-fiber\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Camera <span class=\"token keyword\">from</span> <span class=\"token string\">\"./components/Camera\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Particles <span class=\"token keyword\">from</span> <span class=\"token string\">\"./components/Particles\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> RenderEffects <span class=\"token keyword\">from</span> <span class=\"token string\">\"./components/RenderEffects\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"./App.css\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Canvas</span></span>\n        <span class=\"token attr-name\">concurrent</span>\n        <span class=\"token attr-name\">onCreated</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> gl <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          gl<span class=\"token punctuation\">.</span><span class=\"token function\">setClearColor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token constant\">THREE</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">Color</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#1D2224\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Camera</span></span> <span class=\"token attr-name\">position</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">lookAt</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Suspense</span></span> <span class=\"token attr-name\">fallback</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Particles</span></span> <span class=\"token attr-name\">size</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RenderEffects</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Suspense</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Canvas</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The clear color will be used on every new frame by clearing the framebuffer with this color before the pipeline renders anything. So you can change the background to any color you want. We load our own camera component with two simple props to change the position of the camera and the point to look at.</p>\n<p>All the components that hook into the React suspense API like the <em>useLoader</em> hook we mentioned earlier are wrapped by the Suspense component. Suspense is currently an experimental API for React that allows us to trigger all the loaders to start in a nested hierarchy of components and in a parent component, show a fallback component like a loader until all these have completed. You can then add other components, and the parent will wait for them all to resolve before they are rendered.</p>\n<h3 id=\"summary\" style=\"position:relative;\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h3>\n<p>We built a particle effect in <em>react-three-fiber</em> that can render thousands of particles at once. You can visit the Github repository to take a look for yourself.</p>\n<p><a href=\"https://github.com/rolandharrison/react-three-fiber-example\">Github Repository</a></p>\n<p>Or visit the code sandbox to play with the effect.</p>\n<p><a href=\"https://codesandbox.io/embed/github/rolandharrison/react-three-fiber-example/tree/master/?fontsize=14&#x26;hidenavigation=1&#x26;theme=dark\">CodeSandbox</a></p>","excerpt":"React-Three-Fiber allows us to write re-usable React components for Three.js without any loss in performance. As a reconciler for React…","timeToRead":7,"fields":{"slug":"/posts/2020-04-17--react-three-fiber-particle-effect/"},"frontmatter":{"tags":["react-three-fiber","react","three-js"],"author":{"id":"Roland Harrison","bio":"Developer","twitter":"@rolandharrison","avatar":{"children":[{"__typename":"ImageSharp","fixed":{"src":"/static/19ddf7d0f953aa74841a6a4f4a9390d6/b0b39/roland.jpg","srcSet":"/static/19ddf7d0f953aa74841a6a4f4a9390d6/b0b39/roland.jpg 1x,\n/static/19ddf7d0f953aa74841a6a4f4a9390d6/93542/roland.jpg 1.5x,\n/static/19ddf7d0f953aa74841a6a4f4a9390d6/aa4d2/roland.jpg 2x"}}]}},"keywords":["react","react-three-fiber","webgl","threejs","react hooks","shaders","vertex"],"title":"Rendering particles with React-Three-Fiber","updatedDate":"Apr 25, 2020","image":{"children":[{"__typename":"ImageSharp","fixed":{"src":"/static/93fc8f7416665f212bb17fbe3f70e038/4efbf/waves.png","srcSet":"/static/93fc8f7416665f212bb17fbe3f70e038/4efbf/waves.png 1x,\n/static/93fc8f7416665f212bb17fbe3f70e038/4424b/waves.png 1.5x"}}]}}},"recents":{"edges":[]}},"pageContext":{"slug":"/posts/2020-04-17--react-three-fiber-particle-effect/"}},"staticQueryHashes":["1917886907","491156461"]}